#include "Trie.hpp" //Included for debugging purposes to help vim code syntax highlighter should not cause cyclical include

template<typename value>
Trie<value>::Trie(value defaultValue):defVal(defaultValue){}

template<typename value>
Trie<value>::~Trie(){
	cleanUp(this->root);
	if(wordCount!=0 || nodeCount!=0)
		std::cerr<<"Their was an Error Cleaning Up Trie Nodes";
}

template<typename value>
void Trie<value>::cleanUp(TrieNode * x){
	if(x==nullptr)return;
	cleanUp(x->left);
	cleanUp(x->mid);
	cleanUp(x->right);
	if(x->val!=defVal)this->wordCount--; //word found
	delete x;
	this->nodeCount--;	
}

template<typename value>
size_t Trie<value>::size()const{return wordCount;}

template<typename value>
size_t Trie<value>::num()const{return nodeCount;}

template<typename value>
value Trie<value>::getDefaultValue()const{return defVal;}

template<typename value>
bool Trie<value>::contains(std::string key,const bool & ignoreCase)const{return get(key,ignoreCase)!=defVal;}

template<typename value>
bool Trie<value>::equals(const Trie &other_trie)const{
	if(size()!=other_trie.size())return false;
	//should not require sorting if identical
	return keys()==other_trie.keys();
}

template<typename value>
std::string Trie<value>::details(){
	std::string ss;
	ss += "Trie is ";
	if (ratio!=0) ss+="Compressed w/ Ratio[" +std::to_string(ratio) + "]\n";
	else ss+= "Uncompressed\n";
	ss += "Total Number of words in Trie: " + std::to_string(wordCount) + "\n";
	ss += "Total Number of Nodes in Trie: " + std::to_string(nodeCount) + "\n";
	return ss;
}

template<typename value>
value Trie<value>::get(std::string key,const bool & ignoreCase) const {
	if(key.empty()){throw std::invalid_argument("key must have length >= 1");}
	if(ignoreCase)__toLowerCase(key);
	TrieNode* x = get(root,key,0,ignoreCase);
	return x!=nullptr? x->val : defVal;
}

template<typename value>
typename Trie<value>::TrieNode * Trie<value>::get(TrieNode * x,const std::string & key,size_t d,const bool & ignoreCase)const{
	if(key.empty()){throw std::invalid_argument("key must have length >= 1");}
	if(x == nullptr) {return nullptr;}

	std::string xkey(x->key);
	if(ignoreCase)__toLowerCase(xkey);

	size_t offset = __lcp(d,key,xkey);
	d += offset;//need to be on last letter // but if at 0 will cause issues so make case
	if	(key[d]<xkey[offset])		return get(x->left, key, d,  ignoreCase);//if key val less than curr node
	else if	(key[d]>xkey[offset])		return get(x->right,key, d,  ignoreCase);//if key val greater than curr node
	else if	(d<key.length()-1)		return get(x->mid,  key, d+1,ignoreCase);// need to be -2 because of \0 of string
	else if	(offset<xkey.length()-1)  	return nullptr; //Found a node but its longer than remaining key
	//ie looking for the but only found these<-Is likely in a compressed node
	else 					return x;
}

//ALWAYS PLACE ORIGINAL VALUE IN TABLE NO IGNORE CASE 
template<typename value>
void Trie<value>::put(std::string key,const value & val){	
	if(val==defVal)throw std::invalid_argument("value is equivalent to default value; Adding is irrelevant");
	if(!contains(key))wordCount++;//increase size
	root = put(root,key,val,0);
}

template<typename value>
typename Trie<value>::TrieNode * Trie<value>::put(TrieNode  * x, const std::string & key, const value & val, size_t d){
	if(x==nullptr){
		x = new TrieNode(std::string(1,key[d]),defVal);
		nodeCount++;
	}
	size_t offset = __lcp(d,key,x->key);
	d += offset;//need to be on last letter compared// but if at 0 will cause issues so make case
	if	(key[d] < x->key[offset])	x->left  = put(x->left,  key, val, d);   //if key val less than curr node
	else if	(key[d] > x->key[offset])	x->right = put(x->right, key, val, d);   //if key val greater than curr node
	else if	(d < key.length()-1)		x->mid   = put(x->mid,   key, val, d+1); //need to be -2 because of  \0
	else if (offset<x->key.length()-1){// special case for strings>1, prevent false positivei
		//this means we are inside a current node and need to break it in half
		std::string key1 = x->key.substr(0,offset);//get first half
		std::string key2 = x->key.substr(offset);//get second half
		x->key.assign(key2);
		//Their may be a huge problem with where to place left & right nodes; however no issue presented in preliminary testing
		return new TrieNode(key1,val,x);
	}
	else 					x->val   = val;
	return x;
}

template<typename value>
std::string Trie<value>::longestPrefix(std::string key,const bool & ignoreCase) const{
	if(key.empty()) return key; //why not just return same key its empty anyway
	if(ignoreCase)__toLowerCase(key);	
	TrieNode * x = root;
	size_t i = 0;
	size_t offset = 0;
	size_t len = 0;
	while(x!=nullptr && i < key.length()){
		std::string xkey(x->key);
		if(ignoreCase)__toLowerCase(xkey);

		offset = __lcp(i,key,xkey);
		i += offset;//need to be on last letter // but if at 0 will cause issues so make case

		if(key[i] < xkey[offset])	x = x->left;
		else if(key[i] > xkey[offset])	x = x->right;
		else if(offset<xkey.length()-1) break;//terminate since value looking for is not in tree
		else{
			i++;
			if(x->val != defVal)len = i;
			x = x->mid;
		}	   
	}
	return key.substr(0,len);
}

template<typename value>
void Trie<value>::collect(TrieNode * x, std::string prefix, std::vector<std::string> & vec)const{
	if(x==nullptr) return;
	collect(x->left,  prefix, vec);
	if (x->val != defVal)vec.emplace_back(prefix + x->key);
	collect(x->mid, prefix + x->key, vec);//middle means word
	collect(x->right, prefix, vec);
}

template<typename value>
std::vector<std::string> Trie<value>::keys() const{
	std::vector<std::string> vec;
	collect(root, u8"", vec);
	return vec;	
}

template<typename value>
std::vector<std::string> Trie<value>::prefixMatch(std::string prefix,const bool & ignoreCase) const{
	if(ignoreCase)__toLowerCase(prefix);
	std::vector<std::string> vec;
	TrieNode * x = getPrefixNode(root, prefix, u8"",0,ignoreCase);
	if (x == nullptr)return vec;
	if (x->val != defVal) vec.emplace_back(x->key);
	collect(x->mid, x->key, vec);
	delete x;//Can do this confidently because getPrefixNode is specific to this call
	return vec;	
}

template<typename value>
void Trie<value>::collect(TrieNode * x, std::string prefix, int d, 
		std::string pat, std::vector<std::string> & vec,const bool & ignoreCase)const{
	if(x==nullptr) return;

	std::string xkey(x->key);
	if(ignoreCase)__toLowerCase(xkey);

	size_t offset = __lcp(d,pat,xkey);
	d += offset;//need to be on last letter // but if at 0 will cause issues so make case
	char c = pat[d];
	char key = xkey[offset];

	if(c== '.' || c < key)collect(x->left, prefix, d, pat, vec);
	if(c== '.' || c == key){
		if(d == (int)pat.length()-1 && x->val != defVal)vec.emplace_back(prefix + x->key);
		if(d < (int)pat.length()-1)collect(x->mid, prefix + x->key, d+1, pat, vec);	
	}
	if(c== '.' || c > key)collect(x->right,prefix,d,pat,vec);	
}

template<typename value>
std::vector<std::string> Trie<value>::wildCardMatch(std::string pat, const bool & ignoreCase) const{
	if(ignoreCase)__toLowerCase(pat);
	std::vector<std::string> vec;
	collect(root, u8"", 0, pat, vec);
	return vec;	
}

template<typename value>
typename Trie<value>::TrieNode * Trie<value>::getPrefixNode(TrieNode * x,std::string key,std::string prefix,
		size_t d,const bool & ignoreCase)const{
	if(key.empty()){throw std::invalid_argument("key must have length >= 1");}
	if(x == nullptr) {return nullptr;}

	std::string xkey = x->key;
	if(ignoreCase)__toLowerCase(xkey);

	size_t offset = __lcp(d,key,xkey);
	d += offset;//need to be on last letter // but if at 0 will cause issues so make case
	if	(key[d]<xkey[offset])	return getPrefixNode(x->left, key, prefix, d,ignoreCase);//if key val less than curr node
	else if	(key[d]>xkey[offset])	return getPrefixNode(x->right,key, prefix, d,ignoreCase);//if key val greater than curr node
	//Compression leads to special case nodes in which a term searched can be part of a longer key
	//this indicates that the term is irellevant without the full node's key so reconstruct ful prefix
	//Append key	
	prefix+=xkey;
	if	(d<key.length()-1)	return getPrefixNode(x->mid,  key, prefix, d+1,ignoreCase);// need to be -2 because of \0 of stringi
	else				return new TrieNode(prefix,x->val,x->mid,x->left,x->right);
}

template<typename value>
size_t Trie<value>::compress(){
	size_t oldN = nodeCount;
	//Should think about Sorting and reseting root 
	root = compress(root);		
	ratio = 1.0f - 1.0f*nodeCount/oldN;	
	return oldN - nodeCount;
}

template<typename value>
typename Trie<value>::TrieNode * Trie<value>::compress(TrieNode * x){
	if(x == nullptr) return nullptr;
	//For some reason this is the better way to do it other variations causese issues
	TrieNode * mid = x->mid;	
	if(x->val == defVal && mid != nullptr && 
			mid->left == nullptr && mid->right == nullptr){
		//due to matching and general tree structure 
		//changing the parent or child of an an 
		//active node causes mis matching with subsequent calls to get 
		nodeCount--;//node will be deleted so update count
		///////////////////////////////////////////	
		x->key.append(mid->key);
		x->mid = mid->mid;
		x->val = mid->val;	
		delete mid;
		x = compress(x);//uhm this actually makes no sense does more work than it should
	}
	//Current Compression Algorithm Causes This section
	//to be repeated M times where M is equal to 
	//the amount of Nodes deleted	
	//find alternate solution
	x->mid   = compress(x->mid);
	x->left  = compress(x->left);
	x->right = compress(x->right);

	return x;
}

template<typename value>
void Trie<value>::__toLowerCase(std::string & s) const{
	for(size_t i = 0; i<s.length()-1; i++){
		s[i] = ::tolower(s[i]);
	}
}

//Longest Common Prefix
//use d as offset to s1 then begin compare s2
template<typename value>
size_t Trie<value>::__lcp(size_t d,const std::string & s1,const std::string & s2) const{
	size_t c = 0;
	//Must Determine position of last matching character and match the letters 
	//after it meaning decrease total length of search by 1
	for(size_t i = 0; (d+i)<s1.length()-1 && i<s2.length()-1;i++){
		if(s1[d+i]!=s2[i])break;
		c++; 
	}
	return c;
}

///////////////////WARNING ATROCIOUS - WICKEDLY HORRIFYING AND UGLY CODE AHEAD 
///////////////////POLL FOR RECREATION AT A LATER DATE
///////////////////Used a stream stream to store value and then store length of stream and 
//////////////////then convert stream to string and store char_array 
//////////////////This was more reliables as it can store both primatives AND objects 
template<typename value>
std::ostream & Trie<value>::write( std::ostream & dst)const{
	std::stringstream temp;
	std::string str;
	size_t szlg = sizeof(long);

	long sz = (long)this->size();
	dst.write((char *)(&sz),szlg);//used to check if all words loaded properly
	for(const std::string & key:this->keys()){
		//write key
		//do this to get size of string and proper value to store
		temp.str("");temp.clear();
		temp << key;
		str = temp.str();
		sz = (long)str.length()+1;//a bit of padding for correct reading
		dst.write((char *)(&sz),szlg);
		dst.write(str.c_str(),sz);

		//write value	
		temp.str("");temp.clear();
		temp << this->get(key); //Does this because more reliable when serializing generic objects
		str = temp.str();
		sz = (long)str.length()+1;//a bit of padding for correct reading
		dst.write((char *)(&sz),szlg);
		dst.write(str.c_str(),sz);
	}
	return dst;
}

template<typename value>
std::istream & Trie<value>::read( std::istream  & src){
	std::stringstream temp;
	size_t szlg = sizeof(long);

	long sz = 0;
	long size=0; src.read((char *)(&size),szlg);//check if all words loaded properly
	while(src.peek()!=EOF){//need early termination // checking src.eof will not work in this case
		//recover key
		src.read((char *)(&sz),szlg);
		char tmp[sz];src.read(tmp,sz);
		std::string key(tmp);

		//recover value
		value val;
		temp.str("");temp.clear();
		src.read((char *)(&sz),szlg);
		char tmp2[sz];src.read(tmp2,sz);
		temp << tmp2;
		temp >> val;//this makes deserializaing generic objects leagues easier	

		//Add To Tree
		this->put(key,val);
	}
	if(size!=(long)this->size()){
		std::cerr << "Error loading Trie!" << size << "/"<<this->size()<<std::endl;
		exit(EXIT_FAILURE);	
	}
	return src;
}

